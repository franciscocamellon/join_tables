root = QgsProject.instance().layerTreeRoot()
layers_tree = root.findLayers()
#makes a function
"""
create two dictionaire, one with spatial layer names
and your root.findLayerIds() and other with non-spatial
layers and your root.findLayerIds()
"""
p_dict = {}
t_dict = {}
p = [] 
pids = []
t = [] 
tids = []
i = 0
for layer_tree in layers_tree:
    layer = layer_tree.layer()

    if layer.type() == 0:
        layer_type = layer.geometryType()
        layer_name = layer.name()
        ids = root.findLayerIds()
        
        if layer_type == 0:
            p = layer_name
            pids = ids[i]
            p_dict[pids] = p_dict.setdefault(pids, p)
        elif layer_type == 4:
            t = layer_name
            tids = ids[i]
            t_dict[tids] = t_dict.setdefault(tids, t)
        i += 1

print('Pontos: ',p)
print('Tabelas: ',t)
print('----------------------------')
print('Pontos: ',p_dict)
print('Tabelas: ',t_dict)
print('----------------------------')

#makes a function
"""
creates a dictionaire with the pairs of the spatial and non-spatial root.findLayerIds 
from the keys of the other twice
""" 
d = {}
for k, v in p_dict.items():
    for c, e in t_dict.items():
        if p_dict[k] == t_dict[c]:
            d[k] = d.setdefault(k, c)

"""
does a loop in the items of the dictionaire above and sets the spatial join
attributes
"""
for k, v in d.items():
    target = QgsProject.instance().mapLayer(k)
    print('target: ', target.id())
    layerToJoin = QgsProject.instance().mapLayer(v)
    print('layerToJoin: ', layerToJoin.id())
    fieldToJoin = QgsProject.instance()
    symb = QgsVectorLayerJoinInfo()
    symb.setJoinFieldName('id_feature')
    symb.setTargetFieldName('id')
    symb.setJoinLayerId(layerToJoin.id())
    symb.setUsingMemoryCache(True)
    symb.setEditable(True)
    symb.setDynamicFormEnabled(True)
    symb.setUpsertOnEdit(True)
    symb.setPrefix('')
    symb.setJoinFieldNamesSubset(['ocultar', 'legenda', 'tamanhotxt', 'justtxt', 'orient_txt', 'orient_simb', 'offset_txt', 'offset_simb', 'prioridade', 'offset_txt_x', 'offset_txt_y'])
    symb.setJoinLayer(layerToJoin)
    target.addJoin(symb)