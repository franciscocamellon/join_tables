# -*- coding: utf-8 -*-
"""
/***************************************************************************
 JoinTable
                                 A QGIS plugin
 Perform joins between spatial and non spatial tables
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-09
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Francisco Camello N
        email                : franciscocamellon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QWidget, QMenu
from qgis.core import QgsVectorLayer, QgsVectorLayerJoinInfo, QgsProject, QgsWkbTypes
from qgis.utils import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .join_tables_dialog import JoinTableDialog
import os.path


class JoinTable:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'JoinTable_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Join Tables')
        self.toolbar = self.iface.addToolBar(u'&Join Tables')
        self.toolbar.setObjectName(u'&Join Tables')

        self.dsgTools = None
        self.menuBar = self.iface.mainWindow().menuBar()
        # self.provider = DSGToolsProcessingAlgorithmProvider()

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        ###
        self.root = QgsProject.instance().layerTreeRoot()
        self.layers_tree = self.root.findLayers()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('JoinTable', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon('E:\_Code\QGIS\join_tables\icons\icon.png')
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        """
        # Check if the menu exists and get it
        self.menu = self.iface.mainWindow().findChild(QMenu, '&My tools')

        # If the menu does not exist, create it!
        if not self.menu:
            self.menu = QMenu('&My tools', self.iface.mainWindow().menuBar())
            self.menu.setObjectName('&My tools')
            actions = self.iface.mainWindow().menuBar().actions()
            lastAction = actions[-1]
            self.iface.mainWindow().menuBar().insertMenu(lastAction, self.menu)

        # Finally, add your action to the menu
        self.menu.addAction(self.action)
        """

        icon_path = ':/plugins/join_tables/icons/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Join'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Join Tables'),
                action)
            self.iface.removeToolBarIcon(action)

    def lyrdict(self):
        g_dict = {}
        t_dict = {}
        i = 0
        for layer_tree in self.layers_tree:
            layer = layer_tree.layer()

            if layer.type() == 0:
                layer_type = layer.geometryType()
                layer_name = layer.name()
                ids = self.root.findLayerIds()

                if layer_type == 0 or layer_type == 1:
                    g = layer_name
                    gids = ids[i]
                    g_dict[gids] = g_dict.setdefault(gids, g)
                elif layer_type == 4:
                    t = layer_name
                    tids = ids[i]
                    t_dict[tids] = t_dict.setdefault(tids, t)
                i += 1
        return g_dict, t_dict

    def lyrpair(self):
        g_dict, t_dict = self.lyrdict()
        d = {}
        for k, v in g_dict.items():
            for c, e in t_dict.items():
                if g_dict[k] == t_dict[c]:
                    d[k] = d.setdefault(k, c)
        return d

    def jointables(self):
        d = self.lyrpair()
        for k, v in d.items():
            target = QgsProject.instance().mapLayer(k)
            layerToJoin = QgsProject.instance().mapLayer(v)
            fieldToJoin = QgsProject.instance()
            symb = QgsVectorLayerJoinInfo()
            symb.setJoinFieldName('id_feature')
            symb.setTargetFieldName('id')
            symb.setJoinLayerId(layerToJoin.id())
            symb.setUsingMemoryCache(True)
            symb.setEditable(True)
            symb.setDynamicFormEnabled(True)
            symb.setUpsertOnEdit(True)
            symb.setPrefix('')
            symb.setJoinFieldNamesSubset(
                ['ocultar', 'legenda', 'tamanhotxt', 'justtxt', 'orient_txt', 'orient_simb', 'offset_txt',
                 'offset_simb', 'prioridade', 'offset_txt_x', 'offset_txt_y'])
            symb.setJoinLayer(layerToJoin)
            target.addJoin(symb)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = JoinTableDialog()

        # cut off the dialog????
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.jointables()
            iface.messageBar().pushMessage("Success", "Table joins done!", level=0, duration=3)
        else:
            # treat errors and/or exceptions
            iface.messageBar().pushMessage("Something is wrong!", level=2, duration=3)
